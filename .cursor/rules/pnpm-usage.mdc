---
description: 
globs: 
alwaysApply: false
---
# 喵呜记账pnpm使用指南

## 为什么使用pnpm

- 节省磁盘空间：通过硬链接共享依赖
- 更快的安装速度：依赖安装更加高效
- 严格的依赖管理：防止幽灵依赖
- 支持monorepo：通过工作空间管理前后端项目

## 安装pnpm

全局安装pnpm:

```bash
npm install -g pnpm
```

## 项目设置

### 初始化项目

```bash
pnpm init
```

### 前后端依赖安装

安装前端依赖:

```bash
cd frontend
pnpm install
```

安装后端依赖:

```bash
cd backend
pnpm install
```

## 常用命令

### 安装依赖

```bash
# 安装依赖
pnpm add <package>

# 安装开发依赖
pnpm add -D <package>

# 全局安装
pnpm add -g <package>
```

### 移除依赖

```bash
pnpm remove <package>
```

### 运行脚本

```bash
# 运行前端开发服务器
cd frontend
pnpm dev

# 运行后端开发服务器
cd backend
pnpm dev

# 构建项目
pnpm build
```

## Monorepo配置

如果需要将前后端作为一个monorepo管理，在项目根目录创建`pnpm-workspace.yaml`:

```yaml
packages:
  - 'frontend'
  - 'backend'
```

### Monorepo命令

```bash
# 在所有工作空间执行命令
pnpm -r <command>

# 并行执行命令
pnpm -r --parallel <command>

# 安装所有依赖
pnpm install

# 运行所有工作空间的同名脚本
pnpm -r run dev
```

## 从npm迁移到pnpm

1. 删除现有的node_modules文件夹
   ```bash
   rm -rf node_modules
   ```

2. 删除package-lock.json
   ```bash
   rm package-lock.json
   ```

3. 使用pnpm安装依赖
   ```bash
   pnpm install
   ```

## CI/CD集成

在CI/CD流程中使用pnpm:

```yaml
# .drone.yml 示例
steps:
  - name: install
    commands:
      - npm install -g pnpm
      - pnpm install
  - name: build
    commands:
      - pnpm build
```

## 推荐的pnpm设置

在项目根目录创建`.npmrc`文件:

```
shamefully-hoist=true
strict-peer-dependencies=false
auto-install-peers=true
```
